s[12]
s[13]
s[14]
s[15]
s[16]
s[17]
s[18]
s[19]
s[20]
s[21]
s[22]
s[23]
s[24]
s[25]
s[26]
s[27]
s[28]
s[29]
s[30]
s[31]
s
names(s)
s$SV
s$nSV
s$tot.nSV
plot.svm (s)
library("e1071", lib.loc="~/R/win-library/3.6")
library("e1071", lib.loc="~/R/win-library/3.6")
plot.svm (s)
plot.svm (s,creditcard)
plot (s,creditcard)
plot (s,creditcard, Class ~ .)
plot (s,creditcard, Class ~ .)
plot (s,creditcard[,-31], Class ~ .)
plot (s,creditcard, Class ~.)
creditcard$Class = as.factor(creditcard$Class)
creditcard$Class = as.factor(creditcard$Class)
plot (s,creditcard, Class ~.)
creditcard$Class = as.numeric(creditcard$Class)
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
plot (s,creditcard, Class ~.)
plot (s,creditcard, Class ~.)
plotly (s,creditcard, Class ~.)
plot (s,creditcard, Class ~.)
print(plot (s,creditcard, Class ~.))
x=plot (s,creditcard, Class ~.)
x
s
s$tot.nSV
names(s)
s$type
s$degree
s$labels
s$levels
snu
s$nu
s$ncv
s$nsv
s$nSV
s$tot.nSV
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
s
s$kernel
names(s)
s$degree
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
s$degree
s$gamma
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
randomForest::
randomForest
randomForest()
sin()
sin
lo
log
randomForest::
randomForest
randomForest(tm)
tree
trees
library("randomForest", lib.loc="~/R/win-library/3.6")
randomForest()
randomForest
UseMethod("randomForest")
randomForest()
randomForest
function (x, ...)
UseMethod("randomForest")
<bytecode: 0x00000000170deff0>
<environment: namespace:randomForest>
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
plot(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
class(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
class(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 10, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 11, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 11, labelVar=F)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 10, labelVar=F)
getTree
data(iris)
## Look at the third trees in the forestrandomForest(iris[,-5], iris[,5], ntree=10)
rd=randomForest(iris[,-5], iris[,5], ntree=10)
names(rd)
rd$forest
x= data.frame(x=1:10,y=rep(NA,10))
x= data.frame(x=1:10,y=rep(NA,10))
x
na.pmit(c)
na.omit(x)
x= data.frame(x=1:10,y=c(rep(NA,9),1))
na.omit(x)
x= data.frame(x=1:10,y=c(rep(NA,9),1))
library("dplyr", lib.loc="~/R/win-library/3.6")
na.exclude(x)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.6")
x= data.frame(x=1:10,y=c(rep(NA,9),1))
filter(!is.na(x))
filter(!is.na(x))
filter(as_tibble(!is.na(x))))
filter(as_tibble(!is.na(x)))
filter(is.na(x)))
filter(is.na(x))
data <- read.delim("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
na.omit.data = na.omit(data)
View(na.omit.data)
dim(na.omit.data)
dim(data)
names(data)
data <- read.delim("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
data <- read.csv("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
names(data)
data.fifa <- read.csv("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
is.na(data.fifa)
na <- which(is.na(data.fifa)==TRUE)
na
na <- which(is.na(data.fifa)==FALSE)
na
na <- which(is.na(data.fifa)==TRUE)
na
dim(na)
length(na)
data.fifa.na.omit = na.omit(data.fifa)
na.omit(data.fifa.na.omit)
which(is.na(data.fifa.na.omit)==TRUE)
dim(data.fifa.na.omit)
dim(data.fifa)
dim(data.fifa.na.omit) #
View(data.fifa)
names(data.fifa.na.omit)
View(data.fifa.na.omit)
View(data.fifa.na.omit)
data = data.fifa.na.omit[,-c(1,2,3,5,7,10,11,24,26,89)]
dim(data)
library(randomForest)
library("randomForest")
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "success",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
server <- function(input, output, session) {
output$res_bttn1 <- renderPrint(input$bttn1)
output$res_bttn2 <- renderPrint(input$bttn2)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "primary",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
server <- function(input, output, session) {
output$res_bttn1 <- renderPrint(input$bttn1)
output$res_bttn2 <- renderPrint(input$bttn2)
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/GodIsLord/Desktop/Advanced/Shiny/Rstudio_lesson/Lesson4/census-app')
runApp('C:/Users/GodIsLord/Desktop/Advanced/Shiny/Rstudio_lesson/Lesson3/App')
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
# submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
{head(cars, input$x)
tail(cars, input$x)}
})
output$table <- renderTable({
df()
})}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
{list(head(cars, input$x),
tail(cars, input$x))}
})
output$table <- renderTable({
df()
})}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
{list(head(cars, input$x),
tail(cars, input$x))}
})
output$table <- renderTable({
df()
})}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- observeEvent(input$button, {
{list(head(cars, input$x),
tail(cars, input$x))}
})
output$table <- renderTable({
df()
})}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
observeEvent(input$button, {
{list(head(cars, input$x),
tail(cars, input$x))}
})
output$table <- renderTable({
df()
})}
)
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
build_shinyCV()
shiny::runApp('C:/Users/GodIsLord/Desktop/Advanced/Shiny/Shiny_cv/Shiny_Cv')
install_github("DivadNojnarg/shinyCV")
install.github("DivadNojnarg/shinyCV")
library(devtools)
install.packages("devtools")
library(devtools)
install_github   ("DivadNojnarg/shinyCV")
2
2
library(shinyCV)
install_github("DivadNojnarg/shinyCV")
library(devtools)
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
install_github("DivadNojnarg/shinyCV")
shinyCV::build_shinyCV()
library(devtools)
install_github("DivadNojnarg/shinyCV")
library(devtools)
install_github("DivadNojnarg/shinyCV")
library(shinyCV)
install_github("DivadNojnarg/shinyCV")
library(devtools)
install_github("DivadNojnarg/shinyCV")
library(shinyCV)
install.packages(c("sourcetools", "shinyCV"))
build_shinyCV()
library(devtools)
library(shinyCV)
library(shinyCV)
library(shinyCV)
shiny::runGitHub("shinyCV","dtharvey")
library(shinyCV)
install_github("DivadNojnarg/shinyCV")
library(shinyCV)
library(shinyCV-master)
library(shinyCV)
install_github("DivadNojnarg/shinyCV")
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT - Copie/SVM_WORK/Shiny_App')
