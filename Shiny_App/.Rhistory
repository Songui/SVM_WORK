menuSubItem("Histogram", tabName = "Histogram"),
menuSubItem("Model", tabName = "Model")),
menuItem("Results", tabName = "Results", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
tabItems(
# First tab content
tabItem(tabName = "Input",
h2("Input Details"),
fluidRow(
box(title = "Model Parameters",
width = 3, background = "light-blue",
radioButtons(inputId = "model",label=h5("Prediction Model"),
choices = c("rpart","ranger"),selected = "rpart"),
numericInput("cv", label = h5("Cross Validations"), value = 3),
numericInput("tl", label = h5("tuneLength"), value = 3)
),
box(title = "Enter Loan Amount",
height = 130,width = 3, background = "maroon",
numericInput("loan_amnt", label = h6(""), value = 10000)
),
box(title = "Select Intrest Rate Category",
height = 130,width = 3, background = "olive",
selectInput(inputId = "ir_cat",label=h6(""),
choices = c("0-8","8-11","11-13.5","13.5+","Missing"),selected = "8-11")
),
box(title = "Select FICO Grade",
height = 130,width = 3, background = "green",
selectInput(inputId = "grade",label=h6(""),
choices = c("A","B","C","D","E",
"F","G"),selected = "C")
),
box(title = "Select Employment Length",
height = 130,width = 3, background = "purple",
selectInput(inputId = "emp_cat",label=h6(""),
choices = c("0-2","2-4","4-6","6-10",
"10-15","15-30","30-45",
"45+","Missing"),selected = "6-10")
),
box(title = "Select Home Ownership Type",
height = 130,width = 3, background = "teal",
selectInput(inputId = "home_ownership",label=h6(""),
choices = c("MORTGAGE","OTHER","OWN","RENT"),selected = "MORTGAGE")
),
box(title = "Enter Annual Income",
height = 130,width = 3, background = "blue",
numericInput("annual_inc", label = h6(""), value = 100000)
),
box(title = "Enter Customers Age",
height = 130,width = 3, background = "orange",
numericInput("age", label = h6(""), value = 37)
),
box(title = "Submission",
height = 90,width = 3, background = "red",
actionButton("submit","Submit")
)
)
sendSweetAlert(
session = session,
title = "Done !",
text = "Le fichier a bien été lu !",
type = "success"
)
),
tabItem(tabName = "BarPlot",
h2("Barplots"),
fluidRow(
box(title = "Bar Plots",  width = 9,  background = "red",
status = "primary", solidHeader = TRUE, collapsible = TRUE,
plotlyOutput("view1")
),
box(title = "X-Axis Variable",  background = "black", width = 3, height=120,
status = "warning", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "two",label=h6(""),
choices = c("ir_cat","emp_cat","home_ownership","loan_status","grade"),selected = "grade")
),
box(title = "Fill Variable",  width = 3,  background = "red", height=120,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "one",label=h6(""),
choices = c("ir_cat","emp_cat","home_ownership","loan_status","grade"),selected = "grade")
),
box(title = "Opacity Control",  background = "black", width = 3,  height=140,
status = "warning", solidHeader = TRUE, collapsible = TRUE,
sliderInput("slider1", "Opacity:", 0, 1, 0.85)
)
)
),
tabItem(tabName = "ScatterPlot",
h2("ScatterPlots"),
fluidRow(
box(title = "Scatter Plots",  width = 9,  background = "red",
status = "primary", solidHeader = TRUE, collapsible = TRUE,
plotlyOutput("view2")
),
box(title = "X Axis Variable",  width = 3,  background = "red", height=110,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "three",label=h6(""),
choices = c("age","loan_amnt","annual_inc"),selected = "age")
),
box(title = "Y Axis Variable",  width = 3,  background = "red", height=110,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "four",label=h6(""),
choices = c("age","loan_amnt","annual_inc","ir_cat",
"emp_cat","home_ownership","loan_status","grade"),selected = "annual_inc")
),
box(title = "Fill Variables",  width = 3,  background = "red", height=120,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "five",label=h6(""),
choices = c("ir_cat","emp_cat","home_ownership","loan_status","grade"),selected = "ir_cat")
),
box(title = "Control",  background = "black", width = 3, height=270,
status = "warning", solidHeader = TRUE, collapsible = TRUE,
sliderInput("slider4", label=h5("Dataset Length"), 0, 29091, 4500),
sliderInput("slider2", label=h5("Opacity"), 0, 1, 0.85)
)
)
),
tabItem(tabName = "Histogram",
h2("Histograms"),
fluidRow(
box(title = "Histogram",  width = 9,  background = "red",
status = "primary", solidHeader = TRUE, collapsible = TRUE,
plotlyOutput("view3")
),
box(title = "X Axis Variable",  width = 3,  background = "red", height=120,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "six",label=h6(""),
choices = c("age","loan_amnt","annual_inc"),selected = "age")
),
box(title = "Opacity Control",  background = "black", width = 3, height=135,
status = "warning", solidHeader = TRUE, collapsible = TRUE,
sliderInput("slider3", "Opacity:", 0, 1, 0.85)
),
box(title = "Fill Variable",  width = 3,  background = "red", height=120,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
selectInput(inputId = "seven",label=h6(""),
choices = c("ir_cat","emp_cat","home_ownership","loan_status","grade"),selected = "home_ownership")
)
)
),
tabItem(tabName = "Model",
h2("Model"),
fluidRow(
box(title = "Bar Plots",  width = 9,  background = "red",
status = "primary", solidHeader = TRUE, collapsible = TRUE,
plotOutput("view4")
)
)
),
# Second tab content
tabItem(tabName = "Summary",
h2("Summary"),
fluidRow(
box(title = "Dataset Summary", background = "purple",
width = 10,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
verbatimTextOutput("summary1")
),
box(title = "Model Summary", background = "purple",width = 7,
status = "primary",solidHeader = TRUE, collapsible = TRUE,
verbatimTextOutput("summary")
)
)
),
tabItem(tabName = "Results",
h2("Prediction"),
fluidRow(
box(title = "Entered Observation", background = "orange",width = 8,
status = "primary", solidHeader = TRUE, collapsible = TRUE,
tableOutput("table")
),
box(title = "Prediction", background = "red",
status = "primary",  solidHeader = TRUE, collapsible = TRUE,
verbatimTextOutput("pred")
)
)
)
)
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
# Custom CSS to hide the default logout panel
tags$head(tags$style(HTML('.shiny-server-account { display: none; }'))),
# The dynamically-generated user panel
uiOutput("userpanel")
),
dashboardBody()
)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
# Custom CSS to hide the default logout panel
tags$head(tags$style(HTML('.shiny-server-account { display: none; }'))),
# The dynamically-generated user panel
uiOutput("userpanel")
),
dashboardBody()
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic sidebar"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
))
server <- function(input, output) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
}
shinyApp(ui, server)
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
?oversample
??oversample
install.packages("mlr")
install.packages("mlr")
# 2-dimensional example
# loading data
data(hacide)
install.packages("ROSE")
library(ROSE)
# 2-dimensional example
# loading data
data(hacide)
# imbalance on training set
table(hacide.train$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=nrow(hacide.train), p=0.5,
seed=1, method="both")$data
table(data.balanced.ou$cls)
data.balanced.ou
View(hacide))
View(hacide)
View(hacide)
View(hacide.train)
table(data.balanced.ou$cls)
# balanced data set with over-sampling
data.balanced.over <- ovun.sample(cls~., data=hacide.train,
p=0.5, seed=1,
method="over")$data
table(data.balanced.over$cls)
View(data.balanced.over)
data(iris)
data <- iris[, c(1, 2, 5)]
data
## checking the class distribution of this artificial data set
table(data$Species)
table(newData$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
install.packages("smotefamily")
library("smotefamily", lib.loc="~/R/win-library/3.5")
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
## checking the class distribution of this artificial data set
table(data$Species)
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100)
## Now an example where we obtain a model with the "balanced" data
classTree <- SMOTE(Species ~ ., data, perc.over = 600,perc.under=100,
learner='rpartXse',se=0.5)
table(newData$Species)
?SMOTE
data_example = sample_generator(10000,ratio = 0.80)
genData = SMOTE(data_example[,-3],data_example[,3])
genData_2 = SMOTE(data_example[,-3],data_example[,3],K=7)
data_example = sample_generator(10000,ratio = 0.80)
genData = SMOTE(data_example[,-3],data_example[,3])
genData = SMOTE(data_example[,-3],data_example[,3],1)
genData = SMOTE(data_example[,-3],data_example[,3],5)
genData = SMOTE(data_example[,-3],data_example[,3])
data_example
class(data_example[,3])
genData = SMOTE(data_example[,-3],as.factor(data_example[,3]))
as.factor(data_example[,3])
genData = SMOTE(data_example[,-3],data_example[,3])
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- smote(Species ~ ., data, perc.over = 6,perc.under=1)
table(newData$Species)
install.packages("performanceEstimation")
library("smotefamily", lib.loc="~/R/win-library/3.5")
data_example = sample_generator(10000,ratio = 0.80)
genData = SMOTE(data_example[,-3],data_example[,3])
install.packages("knearest")
data_example = sample_generator(10000,ratio = 0.80)
genData = SMOTE(data_example[,-3],data_example[,3])
genData_2 = SMOTE(data_example[,-3],data_example[,3],K=7)
library("smotefamily", lib.loc="~/R/win-library/3.5")
library("smotefamily", lib.loc="~/R/win-library/3.5")
genData
genData$dup_size
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
# 2-dimensional example
# loading data
data(hacide)
# imbalance on training set
table(hacide.train$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=nrow(hacide.train), p=0.6,
seed=1, method="both")$data
table(data.balanced.ou$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=1500, p=0.6,
seed=1, method="over")$data
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=1500, p=0.6,
seed=1, method="over")$data
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
p=0.6,
seed=1, method="over")$data
table(data.balanced.ou$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
p=0.6,
seed=1, method="under")$data
table(data.balanced.ou$cls)
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
p=0.6,
seed=1, method="both")$data
table(data.balanced.ou$cls)
# imbalance on training set
table(hacide.train$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=15, p=0.6,
seed=1, method="both")$data
table(data.balanced.ou$cls)
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=15, p=0.6,
seed=1, method="under")$data
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
N=15, p=0.6,
seed=1, method="over")$data
# balanced data set with both over and under sampling
data.balanced.ou <- ovun.sample(cls~., data=hacide.train,
seed=1, method="over")$data
table(data.balanced.ou$cls)
941/(980+941)
data.balanced.over <- ovun.sample(cls~., data=hacide.train,
p=0.5, seed=1,
method="over")$data
table(data.balanced.over$cls)
data_example = sample_generator(10000,ratio = 0.80)
table(data_example[,3])
genData = SMOTE(data_example[,-3],data_example[,3])
table(genData[,3])
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],3)
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],4)
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],5)
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],dupsize=1)
genData = SMOTE(data_example[,-3],data_example[,3],dup_size=1)
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],dup_size=2)
table(genData$data[,3])
2036*2
2036*3
genData = SMOTE(data_example[,-3],data_example[,3],dup_size=0)
table(genData$data[,3])
genData = SMOTE(data_example[,-3],data_example[,3],dup_size=-1)
genData = SMOTE(data_example[,-3],data_example[,3],dup_size=5)
2036*5
table(genData$data[,3])
2036*4
12216/2036
data_example = sample_generator(10000,ratio = 0.80)
genData = ADAS(data_example[,-3],data_example[,3])
genData_2 = ADAS(data_example[,-3],data_example[,3],K=7)
library("smotefamily", lib.loc="~/R/win-library/3.5")
data_example = sample_generator(10000,ratio = 0.80)
genData = ADAS(data_example[,-3],data_example[,3])
genData_2 = ADAS(data_example[,-3],data_example[,3],K=7)
genData
genData$orig_N
genData$orig_P
genData$syn_data
genData$K
genData$dup_size
table(genData$data)
library("smotefamily", lib.loc="~/R/win-library/3.5")
data_example = sample_generator(10000,ratio = 0.80)
genData = ADAS(data_example[,-3],data_example[,3])
genData_2 = ADAS(data_example[,-3],data_example[,3],K=7)
head(data_example)
table(data_example$result)
table(genData$result)
table(genData$data$result)
head(genData$data)
head(genData$class)
head(genData$data$class)
table(genData$data$class)
table(data_example$result)
table(genData2$data$class)
table(genData_2$data$class)
genData_2 = ADAS(data_example[,-3],data_example[,3],K=20)
table(genData_2$data$class)
genData_2 = ADAS(data_example[,-3],data_example[,3],K=2)
table(genData_2$data$class)
genData_2 = ADAS(data_example[,-3],data_example[,3],K=8)
table(genData_2$data$class)
genData_2 = ADAS(data_example[,-3],data_example[,3],K=20)
table(genData_2$data$class)
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
options(shiny.maxRequestSize=30*1024^2)
getShinyOption("myOption")
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
