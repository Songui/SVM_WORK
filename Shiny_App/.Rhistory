req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK"),
fade = FALSE
)
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer =
actionButton("ok", "OK")
),
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer =
actionButton("ok", "OK")
,
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = actionButton("ok", "OK")
,
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
##############################Mon UI######################################
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username :"),
passwordInput("password", "Password :"),
footer = actionButton("ok", "OK")
,
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
?req
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
which("5"=c("4","8"))
which("5"==c("4","8"))
x <<-5
x
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
paste("hhghgh \n gdggdd")
paste("hhghgh", "\n", gdggdd")
)
paste("hhghgh", "\n", "gdggdd")
paste("hhghgh", \n, "gdggdd")
paste("hhghgh", "\n", "gdggdd", sep="\n")
paste("hhghgh", "\n", "gdggdd", Username <- input$username)
paste("hhghgh", "\n", "gdggdd", collapse = "\n")
paste("hhghgh", "gdggdd", sep = "\n")
paste("hhghgh", "gdggdd", sep = "\t")
cat(paste("hhghgh", "gdggdd", sep = "\n"))
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
class(cat(paste("hhghgh", "gdggdd", sep = "\n")))
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
library(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
column(3, tags$strong("Right")),
column(3, tags$strong("Wrong")),
column(3, tags$strong("Skipped")),
column(3, tags$strong("ToGo"))
),
fluidRow(
column(3, span(style = "color:green;font-weight:bold;", textOutput("right"))),
column(3, textOutput("wrong")),
column(3, textOutput("skipped")),
column(3, textOutput("togo"))
)
),
mainPanel(
)
)
),
server = function(input, output, session) {
correct <- reactiveValues(num = 7)
wrong <- reactiveValues(num = 4)
skipped <- reactiveValues(num = 9)
togo = 80
output$right <- renderText(correct$num)
output$wrong <- renderText(wrong$num)
output$skipped <- renderText(skipped$num)
output$togo <- renderText(togo)
}
)
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
