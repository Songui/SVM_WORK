dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
verbatimTextOutput("dataInfo")
)
)
###########################FINNNNNNNNNNNNN UI ###################
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username :"),
passwordInput("password", "Password :"),
footer = actionButton("ok", "OK")
,
fade = FALSE
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
?req
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
which("5"=c("4","8"))
which("5"==c("4","8"))
x <<-5
x
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
paste("hhghgh \n gdggdd")
paste("hhghgh", "\n", gdggdd")
)
paste("hhghgh", "\n", "gdggdd")
paste("hhghgh", \n, "gdggdd")
paste("hhghgh", "\n", "gdggdd", sep="\n")
paste("hhghgh", "\n", "gdggdd", Username <- input$username)
paste("hhghgh", "\n", "gdggdd", collapse = "\n")
paste("hhghgh", "gdggdd", sep = "\n")
paste("hhghgh", "gdggdd", sep = "\t")
cat(paste("hhghgh", "gdggdd", sep = "\n"))
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
class(cat(paste("hhghgh", "gdggdd", sep = "\n")))
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
library(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
column(3, tags$strong("Right")),
column(3, tags$strong("Wrong")),
column(3, tags$strong("Skipped")),
column(3, tags$strong("ToGo"))
),
fluidRow(
column(3, span(style = "color:green;font-weight:bold;", textOutput("right"))),
column(3, textOutput("wrong")),
column(3, textOutput("skipped")),
column(3, textOutput("togo"))
)
),
mainPanel(
)
)
),
server = function(input, output, session) {
correct <- reactiveValues(num = 7)
wrong <- reactiveValues(num = 4)
skipped <- reactiveValues(num = 9)
togo = 80
output$right <- renderText(correct$num)
output$wrong <- renderText(wrong$num)
output$skipped <- renderText(skipped$num)
output$togo <- renderText(togo)
}
)
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
load(E:/TELECHARGEMENT/real-estate-offers-in-montevideo-uruguay/muestra_modelos_new.Rda)
load("E:/TELECHARGEMENT/real-estate-offers-in-montevideo-uruguay/muestra_modelos_new.Rda")
View(meli_modelo)
View(meli_modelo)
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/TELECHARGEMENT/Shiny_App/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
library(readxl)
creditcard_Copie <- read_excel("E:/ORLEANS/Cours/Master 2 ESA/SVM/creditcardfraud/creditcard-Copie.xlsx")
View(creditcard_Copie)
creditcard$Class = as.factor(creditcard$Class)
library(readxl)
creditcard <- read_excel("E:/ORLEANS/Cours/Master 2 ESA/SVM/creditcardfraud/creditcard-Copie.xlsx")
View(creditcard_Copie)
creditcard$Class = as.factor(creditcard$Class)
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.5,0.01) , cost = seq(1,10),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="fix"))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.5,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="fix"))
t
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.5,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="cross validation"))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.5,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="cross"))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.5,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.2,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
t
names(t)
t$best.model
t$performances
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(gamma =seq(0.1,0.2,0.01) , cost = seq(1,2),
kernel=c("radial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.2,0.01) , cost = seq(1,2),
kernel=c("radial","polynomial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
t
t$parameters
t$best.parameters
t$best.performance
t$performances
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.2,0.01) , cost = seq(1,2),
kernel=c("polynomial","radial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
t
t$performances
getOption("max.print")
View(t$performances)
t$performances
t$best.performance
x=c(t=5,y=8)
max(x)
names(x)
which.max(x)
class(which.max(x)
)
names[which.max(x)]
names(x)[which.max(x)]
y=5
get(names(x)[which.max(x)])
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp()
runApp()
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
t
library(readxl)
creditcard_Copie <- read_excel("E:/ORLEANS/Cours/Master 2 ESA/SVM/creditcardfraud/creditcard-Copie.xlsx")
View(creditcard_Copie)
library(readxl)
creditcard <- read_excel("E:/ORLEANS/Cours/Master 2 ESA/SVM/creditcardfraud/creditcard-Copie.xlsx")
creditcard$Class = as.factor(creditcard$Class)
tune(svm, Class ~ . , data = creditcard, validation.x = resampling_validat(),
ranges = list(gamma = seq(as.numeric(input$auto_gamma_s[1]),as.numeric(input$auto_gamma_s[2])),
cost = seq(as.numeric(input$auto_cost[1]),as.numeric(input$auto_cost[2])),
kernel = "sigmoid"),
tunecontrol = tune.control(sampling = "fix")
)
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(degree=seq(0,10),gamma =seq(0.1,0.2,0.01) , cost = seq(1,2),
kernel=c("polynomial","radial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
class(t$best.parameters)
class(t$best.performance)
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
t
t$best.performance
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp()
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
?try
try(log("a"))
try(log("a"),silent = TRUE)
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
c(2,3)
x=c(2,3)
x
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
library(readxl)
creditcard <- read_excel("E:/ORLEANS/Cours/Master 2 ESA/SVM/creditcardfraud/creditcard-Copie.xlsx")
creditcard$Class = as.factor(creditcard$Class)
tune(svm, Class ~ . , data = creditcard, validation.x = resampling_validat(),
ranges = list(gamma = seq(as.numeric(input$auto_gamma_s[1]),as.numeric(input$auto_gamma_s[2])),
cost = seq(as.numeric(input$auto_cost[1]),as.numeric(input$auto_cost[2])),
kernel = "sigmoid"),
tunecontrol = tune.control(sampling = "fix")
)
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
t=tune(svm, Class ~ .,data = creditcard,
ranges = list(cost = seq(1,2),
kernel=c("linear","polynomial")),
tunecontrol = tune.control(sampling ="cross", cross=2))
s
names(s)
s$nSV
s$SV
s$index
s$coefs
s$rho
s$nclasses
names(s)
s$call
s
s[1]
s[2]
s[3]
s[4]
s[5]
s[6]
s[7]
s[8]
s[9]
s[10]
s[11]
s[12]
s[13]
s[14]
s[15]
s[16]
s[17]
s[18]
s[19]
s[20]
s[21]
s[22]
s[23]
s[24]
s[25]
s[26]
s[27]
s[28]
s[29]
s[30]
s[31]
s
names(s)
s$SV
s$nSV
s$tot.nSV
plot.svm (s)
library("e1071", lib.loc="~/R/win-library/3.6")
library("e1071", lib.loc="~/R/win-library/3.6")
plot.svm (s)
plot.svm (s,creditcard)
plot (s,creditcard)
plot (s,creditcard, Class ~ .)
plot (s,creditcard, Class ~ .)
plot (s,creditcard[,-31], Class ~ .)
plot (s,creditcard, Class ~.)
creditcard$Class = as.factor(creditcard$Class)
creditcard$Class = as.factor(creditcard$Class)
plot (s,creditcard, Class ~.)
creditcard$Class = as.numeric(creditcard$Class)
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
plot (s,creditcard, Class ~.)
plot (s,creditcard, Class ~.)
plotly (s,creditcard, Class ~.)
plot (s,creditcard, Class ~.)
print(plot (s,creditcard, Class ~.))
x=plot (s,creditcard, Class ~.)
x
s
s$tot.nSV
names(s)
s$type
s$degree
s$labels
s$levels
snu
s$nu
s$ncv
s$nsv
s$nSV
s$tot.nSV
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
s
s$kernel
names(s)
s$degree
s=svm (creditcard[,-31],creditcard$Class, kernel = c("linear"))
s$degree
s$gamma
runApp('E:/ORLEANS/Cours/Master 2 ESA/SVM/RAPPORT/SVM_WORK/Shiny_App')
randomForest::
randomForest
randomForest()
sin()
sin
lo
log
randomForest::
randomForest
randomForest(tm)
tree
trees
library("randomForest", lib.loc="~/R/win-library/3.6")
randomForest()
randomForest
UseMethod("randomForest")
randomForest()
randomForest
function (x, ...)
UseMethod("randomForest")
<bytecode: 0x00000000170deff0>
<environment: namespace:randomForest>
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
plot(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
class(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
class(getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE))
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 4, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 10, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 11, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 11, labelVar=F)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 10, labelVar=F)
getTree
data(iris)
## Look at the third trees in the forestrandomForest(iris[,-5], iris[,5], ntree=10)
rd=randomForest(iris[,-5], iris[,5], ntree=10)
names(rd)
rd$forest
x= data.frame(x=1:10,y=rep(NA,10))
x= data.frame(x=1:10,y=rep(NA,10))
x
na.pmit(c)
na.omit(x)
x= data.frame(x=1:10,y=c(rep(NA,9),1))
na.omit(x)
x= data.frame(x=1:10,y=c(rep(NA,9),1))
library("dplyr", lib.loc="~/R/win-library/3.6")
na.exclude(x)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.6")
x= data.frame(x=1:10,y=c(rep(NA,9),1))
filter(!is.na(x))
filter(!is.na(x))
filter(as_tibble(!is.na(x))))
filter(as_tibble(!is.na(x)))
filter(is.na(x)))
filter(is.na(x))
data <- read.delim("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
na.omit.data = na.omit(data)
View(na.omit.data)
dim(na.omit.data)
dim(data)
names(data)
data <- read.delim("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
data <- read.csv("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
View(data)
names(data)
data.fifa <- read.csv("E:/ORLEANS/Cours/Master 2 ESA/Big_Data/Projet/fifa19/data.csv")
is.na(data.fifa)
na <- which(is.na(data.fifa)==TRUE)
na
na <- which(is.na(data.fifa)==FALSE)
na
na <- which(is.na(data.fifa)==TRUE)
na
dim(na)
length(na)
data.fifa.na.omit = na.omit(data.fifa)
na.omit(data.fifa.na.omit)
which(is.na(data.fifa.na.omit)==TRUE)
dim(data.fifa.na.omit)
dim(data.fifa)
dim(data.fifa.na.omit) #
View(data.fifa)
names(data.fifa.na.omit)
View(data.fifa.na.omit)
View(data.fifa.na.omit)
data = data.fifa.na.omit[,-c(1,2,3,5,7,10,11,24,26,89)]
dim(data)
library(randomForest)
library("randomForest")
shiny::runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
boxlist = setdiff(c("a","b","c","d","e","f","g","h"),"h")
class(boxlist)
boxlist[2]
class(boxlist[2])
class(boxlist[5])
boxlist[1]
boxlist[8]
boxlist[7]
boxlist[6]
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
runApp('E:/ORLEANS/Cours/Master 2 ESA/Semestre1/SVM/RAPPORT/SVM_WORK/Shiny_App')
